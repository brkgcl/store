import express, { Request, Response, NextFunction } from 'express';
import { User, UserAttrs } from '../../model/user.model';
import jwt from 'jsonwebtoken';
import { config } from '../../environment/development.config';
import { Password } from '../../model/psswd/password.service';
import { saveUserCookie } from '../../helper/helperfunction';

export const authController = {
  // login: async (req: Request, res: Response) => {
  //   try {
  //     const { email, password } = req.body;

  //     const user = await User.findOne({ email: email });
  //     if (!user) throw new Error('User not found');

  //     const passwordMatches = await Password.toMatch(user.password, password);
  //     if (!passwordMatches) throw new Error('Wrong password');

  //     saveUserCookie(user.email, user.id, req);
  //     res.send(user);
  //   } catch (err) {
  //     res.status(400).send(err);
  //   }
  // },
  login: async (req: Request, res: Response) => {
    const { email, password } = req.body;

    await User.findOne({ email: email })
      .then(async (__user) => {
        if (!__user) res.send(`User not found`);
        else if (!(await Password.toMatch(__user!.password, password)))
          res.send(`Wrong Password`);
        else {
          saveUserCookie(__user!.email, __user!.id, req);
          res.send(__user);
        }
      })
      .catch((err) => {
        throw new Error('505 Login Error: ' + err.message);
      });
  },

  register: async (req: Request, res: Response) => {
    const userData: UserAttrs = req.body;
    await User.findOne({ email: userData.email })
      .then(async (__user) => {
        if (__user) res.status(402).send('User already registered');
        else {
          const __newuser = await User.build(userData);
          await saveUserCookie(__newuser.email, __newuser.id, req);
          res.json(__newuser);
        }
      })
      .catch((err) => {
        throw new Error('505 Register Error: ' + err.message);
      });
  },

  // register: async (req: Request, res: Response) => {
  //   const userData: UserAttrs = req.body;
  //   await User.findOne({ email: userData.email })
  //     .then(async (__user) => {
  //       if (__user) {
  //         throw new Error('User already registered');
  //       }
  //     })
  //     .catch();

  //   const __newuser = User.build(userData);
  //   await __newuser.save();

  //   saveUserCookie(__newuser.email, __newuser.id, req);

  //   res.json(__newuser);
  // },

  logout: async (req: Request, res: Response) => {
    req.session = null;
    res.send('logout');
  },

  // currentuser: async (req: Request, res: Response) => { },
};

/**
 * login: async (req: Request, res: Response) => {
    const { email, password } = req.body;

    await User.findOne({ email: email })
      .then(async (__user) => {
        if (__user) {
          await Password.toMatch(__user.password, password).then(
            (matchedpassword) => {
              if (!matchedpassword) {
                res.send('Wrong password');
              }
              saveUserCookie(__user.email, __user.id, req);
              console.log(__user);

              res.status(200).send(__user);
            }
          );
        }
        // res.send('User not found');
      })
      .catch((err) => {
        res.send('User not found');
      });
  },


  yontem2

    login: async (req: Request, res: Response) => {
    const { email, password } = req.body;

    await User.findOne({ email: email }).then(async (__user) => {
      if (!__user) res.send(`User not found`);
      else if (!(await Password.toMatch(__user!.password, password)))
        res.send(`Wrong Password`);
      else {
        saveUserCookie(__user!.email, __user!.id, req);
        res.send(__user);
      }
    });
  },
*/
